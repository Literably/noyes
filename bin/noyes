#!/usr/bin/env ruby
# vim: set filetype=ruby :
ROOT = File.dirname(File.dirname(__FILE__))
VERSION_FILE = "#{ROOT}/VERSION"
$: << "#{ROOT}/lib" << "#{ROOT}/ship"

require 'trollop'
require 'noyes_c'
include NoyesC

options = Trollop::options do
  version "Noyes #{IO.read(VERSION_FILE).strip} (c) 2010-2012 Talkhouse"
  banner <<DOC'Usage: noyes [options] file1 file2 ...'
Converts files from audio to raw features.  Supports format that your
version of SOX supports.
DOC
  opt :force, 'Force creation'
  opt :verbose, 'Verbose mode'
  opt :pattern, 'Files matching pattern.', :type => :strings, :multi => true
end

patterns = options[:pattern].flatten
pattern_files = patterns.inject [] {|memo, pattern| memo | Dir[pattern]}
audio_files = ARGV | pattern_files
# Make sure were not overwritting anything unless force flag is used.
mfcc_files = audio_files.map {|audio_file| audio_file.sub /\.\w+$/, '.mfcc'}
unless options[:force]
  mfcc_file = mfcc_files.detect {|mfcc_file| File.exists? mfcc_file}
  if mfcc_file
    puts "#{mfcc_file} already exists.  Quitting. Use -f to force."
    exit 9
  end
end
  
audio_files.zip(mfcc_files).each do |audio_file, mfcc_file|
  observations = file2features audio_file
  puts mfcc_file if options[:verbose]
  open(mfcc_file, 'wb') do |f|
    f.print [observations.size, 100000].pack 'N*'
    f.print [0x009c, 0x2306].pack 'n*'
    f.puts observations.flatten.pack 'g*'
  end
end
