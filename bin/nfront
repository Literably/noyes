#!/usr/bin/env ruby
# vim: set filetype=ruby :
ROOT = File.dirname(File.dirname(__FILE__))
VERSION_FILE = "#{ROOT}/VERSION"
$: << "#{ROOT}/lib" << "#{ROOT}/ship"

require 'trollop'

options = Trollop::options do
  version "Noyes #{IO.read(VERSION_FILE).strip} (c) 2010-2012 Talkhouse"
  banner 'Usage: nfront [options] file1 file2 ...'
  opt :implementation, "ruby, c, or java", :default => 'ruby'
  opt :address, "address", :default => 'localhost'
  opt :file, "Output file (overrides default TCP/IP)", :type => :string
  opt :port, "port", :default => 2348
  opt :bits, "bit depth", :default => 16
  opt :frequency, "sampling frequency", :default => 16000
  opt :payload, "mfcc, or pcm", :default => 'mfcc'
  opt :verbose, "verbose", :default => false
end

if options[:bits] != 16 && options[:payload] == 'mfcc'
  Trollop::die :bits, "must be 16 for mfcc"
end

if options[:payload] == 'mfcc'
  f = options[:frequency]
  if f != 8000 && f != 16000
    Trollop::die :frequency, "(#{options[:frequency]}) for mfcc must be either 16000 or 8000"
  end
end

# Must set implementation specific library path before requiring libraries.
case options[:implementation].to_sym
when :fastc
  if RUBY_PLATFORM == 'java'
    puts "The Java implementation is not accessable from Ruby, only JRuby."
    puts "You'll need to check your environment carefully.  If you've"
    puts "installed this gem under both ruby and jruby and both are in"
    puts "your current environment you may have created a conflict."
    puts "You must make sure the Ruby path preceeds the JRuby path."
    exit
  end
  puts "Using Fast C implementation" if options[:verbose]
  require 'noyes_c'
  include NoyesC
  def send_incremental_features file, to_server, from_server, bits, freq
    puts "bits and freq #{bits} #{freq}"
    feature_maker = NoyesC::Fast8kMfcc.new
    pcm = file2pcm file, bits, freq
    to_server.write TMAGIC
    to_server.write TSTART
    pcm.each_slice 1230 do |data|
      data >>= feature_maker
      next unless data
      to_server.write TCEPSTRA
      to_server.write [data.size].pack('N')
      print '.'
      data.each {|cmn| to_server.write cmn.pack('g*')} 
      to_server.flush
    end
    to_server.write TEND
    to_server.write TBYE
    to_server.flush
    from_server.read
  end
when :c
  if RUBY_PLATFORM == 'java'
    puts "The Java implementation is not accessable from Ruby, only JRuby."
    puts "You'll need to check your environment carefully.  If you've"
    puts "installed this gem under both ruby and jruby and both are in"
    puts "your current environment you may have created a conflict."
    puts "You must make sure the Ruby path preceeds the JRuby path."
    exit
  end
  puts "Using C implementation" if options[:verbose]
  require 'noyes_c'
  include NoyesC
when :java
  if RUBY_PLATFORM != 'java'
    puts "The Java implementation is not accessable from Ruby, only JRuby."
    puts "You'll need to check your environment carefully.  If you've"
    puts "installed this gem under both ruby and jruby and both are in"
    puts "your current environment you may have created a conflict."
    puts "You must make sure the JRuby path preceeds the Ruby path."
    exit
  end
  puts "Using Java implementation" if options[:verbose]
  require 'noyes_java'
  include NoyesJava
when :ruby
  if options[:verbose]
    if RUBY_PLATFORM == 'java'
      puts "Using pure ruby implementation under JRuby #{RUBY_VERSION}."
    else
      puts "Using pure ruby implementation under Ruby #{RUBY_VERSION}."
    end
  end

  require 'noyes'
  include Noyes
end
require 'socket'

def recognize file, options
  bits, rate = options[:bits], options[:frequency]
  if rate == 8000
    rateinfo =  FEAT8M16R
  elsif rate == 16000
    rateinfo =  FEAT16M16R
  end
  if options[:file]
    open(options[:file], 'wb') do |client|
      send_incremental_features file, client, nil, bits, rateinfo
    end
  else
    TCPSocket.open(options[:address], options[:port]) do |client|
      if options[:pcm]
        send_incremental_pcm file, client, client, bits, rateinfo
      else
        send_incremental_features file, client, client, bits, rateinfo
      end
    end
  end
rescue Errno::ECONNREFUSED
  puts "Connection refused."
  puts "Possibly the IP address and port are incorrect."
  puts "Or maybe the server is down.  Contact Talkhouse if this persists."
  exit 2
end

ARGV.each do |file|
  puts "recognizing file #{file}" if options[:verbose]
  result = recognize file, options
  if options[:verbose]
    puts "#{result.inspect}"
  else
    puts "#{result[:transcript]}"
  end
end
